import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';

Future<void> sendOTP(BuildContext context) async {
  String phoneNumber = phoneController.text.trim(); // Ensure you have a TextEditingController for the phone number

  if (phoneNumber.isEmpty || phoneNumber.length != 10) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Please enter a valid phone number.')),
    );
    return;
  }

  try {
    final response = await http.post(
      Uri.parse('https://captain-calling-dev-744600285710.asia-south1.run.app/api/v1/auth/login'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'phone': phoneNumber}),
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);

      // Check if response contains 'success' and 'token' fields
      if (data['success'] == true) {
        final String token = data['token'] ?? ''; // Ensure the token is available
        final String userId = data['userId'] ?? ''; // Ensure the userId is available

        if (token.isNotEmpty && userId.isNotEmpty) {
          // Save login state, token, and userId
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool('isLoggedIn', true);
          await prefs.setString('authToken', token); // Save token if required
          await prefs.setString('userId', userId);  // Save userId

          print("OTP sent successfully");
          // Optionally navigate to another screen after successful login
          // Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => const HomeScreen()));
        } else {
          // Token or userId missing or empty, handle error
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Error: Token or User ID not received.')),
          );
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(data['message'] ?? 'Error sending OTP.')),
        );
      }
    } else {
      // Handle non-200 status code (e.g., server issues)
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to send OTP. Please try again.')),
      );
    }
  } catch (e) {
    // Catch any errors such as network issues
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Error: $e')),
    );
  }
}
